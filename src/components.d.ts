/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface TfButton {
        "bold": boolean;
        "color": string;
        "disabled": boolean;
        "icon": string;
        "iconDisabled": string;
        "iconHover": string;
        "shadow": boolean;
        "size": string;
        "text": string;
        "variant": string;
        "width": string;
    }
    interface TfCard {
        "cost": string;
        "date": string;
        "icon": string;
        "image": string;
        "position": string;
        "solution": boolean;
        "solutions": string[];
        "subtitle": string;
        "title": string;
        "variant": string;
        "view": string;
        "width": string;
    }
    interface TfControl {
        "direction": string;
        "disabled": boolean;
        "variant": string;
    }
    interface TfHeadline {
        "color": string;
        "component": string;
        "variant": string;
    }
    interface TfIcons {
        "iconName": string;
        "pointer": boolean;
    }
    interface TfImage {
        "imageName": string;
    }
    interface TfLink {
        "active": boolean;
        "disabled": boolean;
        "href": string;
        "target": string;
        "text": string;
        "variant": string;
    }
    interface TfParagraph {
        "color": string;
        "component": string;
        "variant": string;
    }
    interface TfShadowBtn {
    }
    interface TfShadowCard {
        "variant": string;
    }
    interface TfSubscribe {
        "theme": string;
        "variant": string;
    }
    interface TfSwitch {
        "variant": string;
    }
    interface TfTab {
        "variant": string;
    }
    interface TfTag {
        "disabled": boolean;
        "pointer": boolean;
    }
}
declare global {
    interface HTMLTfButtonElement extends Components.TfButton, HTMLStencilElement {
    }
    var HTMLTfButtonElement: {
        prototype: HTMLTfButtonElement;
        new (): HTMLTfButtonElement;
    };
    interface HTMLTfCardElement extends Components.TfCard, HTMLStencilElement {
    }
    var HTMLTfCardElement: {
        prototype: HTMLTfCardElement;
        new (): HTMLTfCardElement;
    };
    interface HTMLTfControlElement extends Components.TfControl, HTMLStencilElement {
    }
    var HTMLTfControlElement: {
        prototype: HTMLTfControlElement;
        new (): HTMLTfControlElement;
    };
    interface HTMLTfHeadlineElement extends Components.TfHeadline, HTMLStencilElement {
    }
    var HTMLTfHeadlineElement: {
        prototype: HTMLTfHeadlineElement;
        new (): HTMLTfHeadlineElement;
    };
    interface HTMLTfIconsElement extends Components.TfIcons, HTMLStencilElement {
    }
    var HTMLTfIconsElement: {
        prototype: HTMLTfIconsElement;
        new (): HTMLTfIconsElement;
    };
    interface HTMLTfImageElement extends Components.TfImage, HTMLStencilElement {
    }
    var HTMLTfImageElement: {
        prototype: HTMLTfImageElement;
        new (): HTMLTfImageElement;
    };
    interface HTMLTfLinkElement extends Components.TfLink, HTMLStencilElement {
    }
    var HTMLTfLinkElement: {
        prototype: HTMLTfLinkElement;
        new (): HTMLTfLinkElement;
    };
    interface HTMLTfParagraphElement extends Components.TfParagraph, HTMLStencilElement {
    }
    var HTMLTfParagraphElement: {
        prototype: HTMLTfParagraphElement;
        new (): HTMLTfParagraphElement;
    };
    interface HTMLTfShadowBtnElement extends Components.TfShadowBtn, HTMLStencilElement {
    }
    var HTMLTfShadowBtnElement: {
        prototype: HTMLTfShadowBtnElement;
        new (): HTMLTfShadowBtnElement;
    };
    interface HTMLTfShadowCardElement extends Components.TfShadowCard, HTMLStencilElement {
    }
    var HTMLTfShadowCardElement: {
        prototype: HTMLTfShadowCardElement;
        new (): HTMLTfShadowCardElement;
    };
    interface HTMLTfSubscribeElement extends Components.TfSubscribe, HTMLStencilElement {
    }
    var HTMLTfSubscribeElement: {
        prototype: HTMLTfSubscribeElement;
        new (): HTMLTfSubscribeElement;
    };
    interface HTMLTfSwitchElement extends Components.TfSwitch, HTMLStencilElement {
    }
    var HTMLTfSwitchElement: {
        prototype: HTMLTfSwitchElement;
        new (): HTMLTfSwitchElement;
    };
    interface HTMLTfTabElement extends Components.TfTab, HTMLStencilElement {
    }
    var HTMLTfTabElement: {
        prototype: HTMLTfTabElement;
        new (): HTMLTfTabElement;
    };
    interface HTMLTfTagElement extends Components.TfTag, HTMLStencilElement {
    }
    var HTMLTfTagElement: {
        prototype: HTMLTfTagElement;
        new (): HTMLTfTagElement;
    };
    interface HTMLElementTagNameMap {
        "tf-button": HTMLTfButtonElement;
        "tf-card": HTMLTfCardElement;
        "tf-control": HTMLTfControlElement;
        "tf-headline": HTMLTfHeadlineElement;
        "tf-icons": HTMLTfIconsElement;
        "tf-image": HTMLTfImageElement;
        "tf-link": HTMLTfLinkElement;
        "tf-paragraph": HTMLTfParagraphElement;
        "tf-shadow-btn": HTMLTfShadowBtnElement;
        "tf-shadow-card": HTMLTfShadowCardElement;
        "tf-subscribe": HTMLTfSubscribeElement;
        "tf-switch": HTMLTfSwitchElement;
        "tf-tab": HTMLTfTabElement;
        "tf-tag": HTMLTfTagElement;
    }
}
declare namespace LocalJSX {
    interface TfButton {
        "bold"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconDisabled"?: string;
        "iconHover"?: string;
        "shadow"?: boolean;
        "size"?: string;
        "text"?: string;
        "variant"?: string;
        "width"?: string;
    }
    interface TfCard {
        "cost"?: string;
        "date"?: string;
        "icon"?: string;
        "image"?: string;
        "position"?: string;
        "solution"?: boolean;
        "solutions"?: string[];
        "subtitle"?: string;
        "title"?: string;
        "variant"?: string;
        "view"?: string;
        "width"?: string;
    }
    interface TfControl {
        "direction"?: string;
        "disabled"?: boolean;
        "variant"?: string;
    }
    interface TfHeadline {
        "color"?: string;
        "component"?: string;
        "variant"?: string;
    }
    interface TfIcons {
        "iconName"?: string;
        "pointer"?: boolean;
    }
    interface TfImage {
        "imageName"?: string;
    }
    interface TfLink {
        "active"?: boolean;
        "disabled"?: boolean;
        "href"?: string;
        "target"?: string;
        "text"?: string;
        "variant"?: string;
    }
    interface TfParagraph {
        "color"?: string;
        "component"?: string;
        "variant"?: string;
    }
    interface TfShadowBtn {
    }
    interface TfShadowCard {
        "variant"?: string;
    }
    interface TfSubscribe {
        "theme"?: string;
        "variant"?: string;
    }
    interface TfSwitch {
        "variant"?: string;
    }
    interface TfTab {
        "variant"?: string;
    }
    interface TfTag {
        "disabled"?: boolean;
        "pointer"?: boolean;
    }
    interface IntrinsicElements {
        "tf-button": TfButton;
        "tf-card": TfCard;
        "tf-control": TfControl;
        "tf-headline": TfHeadline;
        "tf-icons": TfIcons;
        "tf-image": TfImage;
        "tf-link": TfLink;
        "tf-paragraph": TfParagraph;
        "tf-shadow-btn": TfShadowBtn;
        "tf-shadow-card": TfShadowCard;
        "tf-subscribe": TfSubscribe;
        "tf-switch": TfSwitch;
        "tf-tab": TfTab;
        "tf-tag": TfTag;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tf-button": LocalJSX.TfButton & JSXBase.HTMLAttributes<HTMLTfButtonElement>;
            "tf-card": LocalJSX.TfCard & JSXBase.HTMLAttributes<HTMLTfCardElement>;
            "tf-control": LocalJSX.TfControl & JSXBase.HTMLAttributes<HTMLTfControlElement>;
            "tf-headline": LocalJSX.TfHeadline & JSXBase.HTMLAttributes<HTMLTfHeadlineElement>;
            "tf-icons": LocalJSX.TfIcons & JSXBase.HTMLAttributes<HTMLTfIconsElement>;
            "tf-image": LocalJSX.TfImage & JSXBase.HTMLAttributes<HTMLTfImageElement>;
            "tf-link": LocalJSX.TfLink & JSXBase.HTMLAttributes<HTMLTfLinkElement>;
            "tf-paragraph": LocalJSX.TfParagraph & JSXBase.HTMLAttributes<HTMLTfParagraphElement>;
            "tf-shadow-btn": LocalJSX.TfShadowBtn & JSXBase.HTMLAttributes<HTMLTfShadowBtnElement>;
            "tf-shadow-card": LocalJSX.TfShadowCard & JSXBase.HTMLAttributes<HTMLTfShadowCardElement>;
            "tf-subscribe": LocalJSX.TfSubscribe & JSXBase.HTMLAttributes<HTMLTfSubscribeElement>;
            "tf-switch": LocalJSX.TfSwitch & JSXBase.HTMLAttributes<HTMLTfSwitchElement>;
            "tf-tab": LocalJSX.TfTab & JSXBase.HTMLAttributes<HTMLTfTabElement>;
            "tf-tag": LocalJSX.TfTag & JSXBase.HTMLAttributes<HTMLTfTagElement>;
        }
    }
}
